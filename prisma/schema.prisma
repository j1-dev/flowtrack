generator client {
  provider = "prisma-client-js"
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  emailVerified DateTime?
  accounts      Account[]
  habits        Habit[]
  sessions      Session[]
  tasks         Task[]
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  start       DateTime
  end         DateTime
  color       String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  completed   Boolean  @default(false)
  tags        Tag[]
  priority    Priority @default(MEDIUM)
  recurrence  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@index([completed])
  @@index([userId])
}

model Habit {
  id        String    @id @default(cuid())
  name      String
  frequency Frequency
  streak    Int       @default(0)
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  color String @default("#000000")
  tasks Task[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
