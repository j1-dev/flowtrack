generator client {
  provider = "prisma-client-js"
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Frequency {
  DAYS
  WEEKS
  MONTHS
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String?
  image         String?
  createdAt     DateTime   @default(now())
  emailVerified DateTime?
  accounts      Account[]
  habits        Habit[]
  sessions      Session[]
  tasks         Task[]
  goals         Goal[]
  notes         Note[]
  Schedule      Schedule[]
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  start       DateTime
  end         DateTime
  color       String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  completed   Boolean   @default(false)
  goalId      String?
  goal        Goal?     @relation(fields: [goalId], references: [id])
  priority    Priority  @default(MEDIUM)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  notes       Note[]
  Schedule    Schedule? @relation(fields: [scheduleId], references: [id])
  scheduleId  String?

  @@index([completed])
  @@index([userId])
  @@index([goalId])
}

model Habit {
  id          String    @id @default(cuid())
  name        String
  frequency   Frequency
  amount      Int       @default(1)
  streak      Int       @default(0)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  goalId      String?
  goal        Goal?     @relation(fields: [goalId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime  @default(now())
  notes       Note[]

  @@index([goalId])
}

model Goal {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  tasks       Task[]
  habits      Habit[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  notes       Note[]

  @@index([userId])
}

model Note {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id])
  habitId   String?
  habit     Habit?   @relation(fields: [habitId], references: [id])
  goalId    String?
  goal      Goal?    @relation(fields: [goalId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Schedule {
  id        String   @id @default(cuid())
  name      String
  type      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
